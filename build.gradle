apply plugin: 'war'
apply plugin: 'eclipse-wtp'

tasks.withType(JavaCompile) {
   options.incremental = true
   sourceCompatibility = '1.7'
   targetCompatibility = '1.7'
}

repositories {
   mavenCentral()
   maven {
      url 'https://repo.spring.io/libs-milestone'
   }
   flatDir { dirs '../lib' }
}

configurations {
   weave
   metamodel
   jettyRunner
   jettyRuntimeClasspath
}

dependencies {
   providedCompile 'commons-logging:commons-logging:1.1.3'
   providedCompile 'javax.servlet:javax.servlet-api:3.0.1'

   compile 'org.slf4j:slf4j-api:1.7.16'
   compile 'javax.validation:validation-api:1.0.0.GA'
   compile 'org.slf4j:jcl-over-slf4j:1.7.16'
   compile 'ch.qos.logback:logback-classic:1.1.5'
   compile 'javax.inject:javax.inject:1'
   compile 'org.eclipse.persistence:javax.persistence'
   compile 'org.springframework:spring-webmvc'
   compile 'org.springframework:spring-tx'
   compile 'org.springframework:spring-orm'
   compile 'org.springframework.security:spring-security-core'
   compile 'org.springframework.security:spring-security-web'
   compile 'org.springframework.security:spring-security-config'
   compile 'org.thymeleaf:thymeleaf-spring4'
   compile 'org.thymeleaf.extras:thymeleaf-extras-springsecurity4'
   compile 'org.eclipse.persistence:org.eclipse.persistence.jpa'
	
   runtime 'org.apache.bval:bval-jsr303'
   runtime 'org.aspectj:aspectjweaver'

   testCompile 'junit:junit'
   testCompile 'org.springframework:spring-test'
   testCompile 'org.hsqldb:hsqldb'
   testCompile 'org.mockito:mockito-core'

   weave 'org.eclipse.persistence:javax.persistence'
   weave 'org.eclipse.persistence:org.eclipse.persistence.jpa'
   
   metamodel 'org.eclipse.persistence:javax.persistence'
   metamodel 'org.eclipse.persistence:org.eclipse.persistence.jpa'
   metamodel 'org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor'
   metamodel 'org.springframework.security:spring-security-core'
   
   jettyRunner 'org.eclipse.jetty:jetty-runner:9.2.10.v20150310'
   jettyRunner 'org.eclipse.jetty:jetty-start:9.2.10.v20150310'
   jettyRunner 'org.springframework:springloaded:1.2.5.RELEASE'
   jettyRuntimeClasspath 'org.apache.commons:commons-dbcp2:2.1.1'
   jettyRuntimeClasspath 'org.hsqldb:hsqldb'
}

configurations.all {
   resolutionStrategy.dependencySubstitution {
      substitute module('org.hsqldb:hsqldb') with module('org.hsqldb:hsqldb:2.3.3')
      substitute module('org.eclipse.persistence:javax.persistence') with module('org.eclipse.persistence:javax.persistence:2.1.0')
      substitute module('org.eclipse.persistence:org.eclipse.persistence.jpa') with module('org.eclipse.persistence:org.eclipse.persistence.jpa:2.6.2')
      substitute module('org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor') with module('org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor:2.6.2')
      substitute module('org.springframework:spring-webmvc') with module('org.springframework:spring-webmvc:4.3.0.RC1')
      substitute module('org.springframework:spring-tx') with module('org.springframework:spring-tx:4.3.0.RC1')
      substitute module('org.springframework:spring-orm') with module('org.springframework:spring-orm:4.3.0.RC1')
      substitute module('org.springframework:spring-test') with module('org.springframework:spring-test:4.3.0.RC1')
      substitute module('org.springframework.security:spring-security-core') with module('org.springframework.security:spring-security-core:4.0.4.RELEASE')
      substitute module('org.springframework.security:spring-security-web') with module('org.springframework.security:spring-security-web:4.0.4.RELEASE')
      substitute module('org.springframework.security:spring-security-config') with module('org.springframework.security:spring-security-config:4.0.4.RELEASE')
      substitute module('org.thymeleaf:thymeleaf-spring4') with module('org.thymeleaf:thymeleaf-spring4:3.0.0.BETA02')
      substitute module('org.thymeleaf.extras:thymeleaf-extras-springsecurity4') with module('org.thymeleaf.extras:thymeleaf-extras-springsecurity4:3.0.0.BETA02')
      substitute module('org.apache.bval:bval-jsr303') with module('org.apache.bval:bval-jsr303:0.5')
      substitute module('org.aspectj:aspectjweaver') with module('org.aspectj:aspectjweaver:1.8.5')
      substitute module('junit:junit') with module('junit:junit:4.12')
      substitute module('org.mockito:mockito-core') with module('org.mockito:mockito-core:2.0.12-beta')
   }
}

// marker task for production specific builds
task release {
   outputs.upToDateWhen { false }
}

// jetty-runner alias
task run {
   outputs.upToDateWhen { false }
}
task stop {
   outputs.upToDateWhen { false }
}
task restart {
   outputs.upToDateWhen { false }
}


// project defs
def entitiesBasePackage = 'basearch.model'


compileJava {
   destinationDir file("$buildDir/compiled-classes")
}

war {
   from "$buildDir/env-dependent-webcontent"
}


// environment dependent resources

task processDevelopmentResources(type: Copy, dependsOn: processResources) {
   from 'env/dev/resources'
   into processResources.destinationDir
   onlyIf { !gradle.taskGraph.hasTask(release) }
}
task processDevelopmentWebInf(type: Sync, dependsOn: processResources) {
   from 'env/dev/web-inf'
   into "$buildDir/env-dependent-webcontent/WEB-INF"
   onlyIf { !gradle.taskGraph.hasTask(release) }
}
task processDevelopmentSqls(type: Copy, dependsOn: processResources) {
   from "$rootDir/sqls/hsql"
   into processResources.destinationDir
   onlyIf { !gradle.taskGraph.hasTask(release) }
}
task processReleaseResources(type: Copy, dependsOn: processResources) {
   from 'env/prod/resources'
   into processResources.destinationDir
   onlyIf { gradle.taskGraph.hasTask(release) }
}
task processReleaseWebInf(type: Sync, dependsOn: processResources) {
   from 'env/prod/web-inf'
   into "$buildDir/env-dependent-webcontent/WEB-INF"
   onlyIf { gradle.taskGraph.hasTask(release) }
}


// jpa weaving

task copyNonPersistentClasses(type: Copy, dependsOn: compileJava) {
   from "$buildDir/compiled-classes"
   into sourceSets.main.output.classesDir
   exclude '**/' + entitiesBasePackage.replaceAll('\\.','/') + '/**'
   includeEmptyDirs = false
}
task copyPersistentClasses(type: Copy, dependsOn: compileJava) {
   from "$buildDir/compiled-classes"
   into "$buildDir/unwoven-persistent-classes"
   include '**/' + entitiesBasePackage.replaceAll('\\.','/') + '/**'
   includeEmptyDirs = false
}
task weaveJpaEntities(type: JavaExec) {
   main = 'org.eclipse.persistence.tools.weaving.jpa.StaticWeave'
   classpath configurations.weave.incoming.files
   args '-persistenceinfo'
   args processResources.destinationDir.absolutePath
   args '-classpath'
   args configurations.compile.incoming.files.asPath
   args '-loglevel'
   args 'INFO'
   args copyPersistentClasses.destinationDir.absolutePath
   args sourceSets.main.output.classesDir.absolutePath

   inputs.files fileTree(copyPersistentClasses.destinationDir),fileTree(processResources.destinationDir).matching({pattern -> pattern.include('**/META-INF/persistence.xml')})
   outputs.dir sourceSets.main.output.classesDir
}
weaveJpaEntities.dependsOn copyPersistentClasses,processDevelopmentResources,processDevelopmentWebInf,processDevelopmentSqls,processReleaseResources,processReleaseWebInf


// assembling of the final webcontent dir

task assembleEnvDependentWebContent(type: Copy, dependsOn: [copyNonPersistentClasses,weaveJpaEntities]) {
   from 'WebContent'
   into "$buildDir/env-dependent-webcontent"
}
classes.dependsOn assembleEnvDependentWebContent


// local jetty run

task deployOnLocalJetty(type: JavaExec) {
   classpath configurations.jettyRunner.incoming.files
   main = '-javaagent:'+configurations.jettyRunner.incoming.files.asFileTree.matching({pattern -> pattern.include('**/springloaded*.jar')}).singleFile.absolutePath
   args '-noverify'
   args '-jar'
   args configurations.jettyRunner.incoming.files.asFileTree.matching({pattern -> pattern.include('**/jetty-runner*.jar')}).singleFile.absolutePath
   configurations.jettyRuntimeClasspath.incoming.files.asFileTree.visit({
      fileDetails -> args '--jar'; args fileDetails.file.absolutePath
   })
   configurations.runtime.incoming.files.asFileTree.visit({
      fileDetails -> args '--jar'; args fileDetails.file.absolutePath
   })
   args '--classes'
   args sourceSets.main.output.classesDir
   args '--classes'
   args sourceSets.main.output.resourcesDir
   args '--stop-port'
   args '8181'
   args '--stop-key'
   args 'abc123'
   args '--out'
   args "$buildDir/jetty-output.log"
   args '--config'
   args "$buildDir/jetty.xml"
   args "$buildDir/env-dependent-webcontent"

   doFirst {
      copy {
         from "$rootDir/jetty/jetty.xml"; into "$buildDir"; expand(keystorePath: "$buildDir/key.store")
      }
      copy {
         from "$rootDir/jetty/key.store"; into "$buildDir"
      }
   }
}
task stopLocalJetty(type: JavaExec) {
   classpath configurations.jettyRunner.incoming.files
   main = '-jar'
   args configurations.jettyRunner.incoming.files.asFileTree.matching({pattern -> pattern.include('**/jetty-start*.jar')}).singleFile.absolutePath
   args 'STOP.PORT=8181'
   args 'STOP.KEY=abc123'
   args '--stop'
}
deployOnLocalJetty.mustRunAfter classes
deployOnLocalJetty.mustRunAfter stopLocalJetty
run.dependsOn deployOnLocalJetty
stop.dependsOn stopLocalJetty
restart.dependsOn deployOnLocalJetty, stopLocalJetty


// test resources

task processTestSqls(type: Copy, dependsOn: processTestResources) {
   from "$rootDir/sqls/hsql"
   into processTestResources.destinationDir
}
testClasses.dependsOn processTestSqls



/**********************
 * metamodel generation
 **********************/

task deleteMetamodel(type: Delete) {
   delete sourceSets.main.java.matching({pattern -> pattern.include('**/' + entitiesBasePackage.replaceAll('\\.','/') + '/**/*_.java')})
}
task generateMetamodel(type: JavaCompile, dependsOn: deleteMetamodel) {
   classpath = configurations.metamodel.incoming.files
   source sourceSets.main.java.matching({pattern -> pattern.include('**/' + entitiesBasePackage.replaceAll('\\.','/') + '/**')})
   destinationDir = sourceSets.main.java.getSrcDirs().iterator().next()
   options.compilerArgs << '-proc:only'
   options.compilerArgs << '-Aeclipselink.persistencexml=' + "$projectDir/env/dev/resources/META-INF/persistence.xml"
}




// Gradle wrapper task
// Only used when in need to reinstall the wrapper
task wrapper(type: Wrapper) {
   gradleVersion = '2.11'
}
